function hFig = imregtool(obj)
%imregtool  Creates an instance of the image registraion GUI
%
%   H = imregtool(OBJ) creates an interactive GUI that allows the user to
%   interactively register images. The figure handle for the new window, H, is
%   returned.
%
%   See also qt_reg.qt_reg

    % Verify caller
    if nargin<1 || ~strcmpi(class(obj),'qt_reg')
        error(['QUATTRO:' mfilename ':guiConstructorChk'],...
                             'Invalid call to GUI constructor. See qt_models.');
    end

    % Prepare figure properties
    figPos = [520 380 560 470];
    isQt   = ~isempty(obj.hExam) && isvalid(obj.hExam) &&...
                           ~isempty(obj.hExam.hFig) && ishandle(obj.hExam.hFig);
    if isQt
        % Determine new figure position
        regPos      = get(obj.hExam.hFig,'Position');
        figPos(1:2) = regPos(1:2);
    end

    % Color set up
    bkg = [93 93 93]/255;

    % Prepare main figure
    obj.hFig = figure('CloseRequestFcn',    @delete_fig_main,...
                      'Color',               bkg,...
                      'Filename',           'qt_reg.m',...
                      'IntegerHandle',      'off',...
                      'MenuBar',            'None',...
                      'Name',               'QUATTRO:: Registration ::',...
                      'NumberTitle',        'off',...
                      'Position',            figPos,...
                      'Resize',             'off',...
                      'Tag',                'figure_main',...
                      'Units',              'Pixels',...
                      'WindowKeyPressFcn',  @key_press_Callback);
         set(obj.hFig,'defaultuicontrolbackgroundcolor','w',...
                      'defaultuicontrolfontsize',9,...
                      'defaultuicontrolhorizontalalignment','left',...
                      'defaultuicontrolstyle','PopupMenu',...
                      'defaultuicontrolunits','pixels',...
                      'defaultuipanelbordertype','etchedin',...
                      'defaultuipanelunits','Pixels',...
                      'defaultuipanelbackgroundcolor',bkg,...
                      'defaultuipanelforegroundcolor','w',...
                      'defaultaxescolor','w',...
                      'defaultaxesxcolor','w',...
                      'defaultaxesycolor','w',...
                      'defaultaxesunits','pixels');
    add_logo(obj.hFig);

    % Prepare UI panels and axes
    hUip(1) = uipanel('Parent',obj.hFig,...
                      'Position',[20 249 161 201],...
                      'Tag','uipanel_reg_options',...
                      'Title','Registration Options');
    hUip(2) = uipanel('Parent',obj.hFig,...
                      'Position',[210 310 130 150],...
                      'Tag','uipanel_target_image',...
                      'Title','Select Target Images');
    hUip(3) = uipanel('Parent',obj.hFig,...
                      'Position',[210 100 130 150],...
                      'Tag','uipanel_moving_image',...
                      'Title','Select Moving Images');
    hAx(1)  =    axes('Parent',obj.hFig,...
                      'Color','w',...
                      'Position',[350 260 200 200],...
                      'Tag','axes_target',...
                      'XTickLabel','',...
                      'YTickLabel','');
    hAx(2)  =    axes('Parent',obj.hFig,...
                      'Color','w',...
                      'Position',[350 30 200 200],...
                      'Tag','axes_moving',...
                      'XTickLabel','',...
                      'YTickLabel','');

    % Get some controls info
    targetStr = {''};
    if isQt
        targetStr{1} = num2str(obj.hExam.sliceIdx);
    end
    examStr  = {''};
    if isQt
        hPopExam = findobj(obj.hExam.hFig,'Tag','popupmenu_exams');
        examStr  = get(hPopExam,'String');
    end

    % Prepare and show images
    if isQt
        % Get images from QUATTRO
        obj.imTarget = obj.hExam.imgs(:,1).img2mat;
        obj.imMoving = obj.hExam.imgs(:,str2double(targetStr{1})).img2mat;
        hdr          = obj.hExam.metaData;
        obj.pixdim1  = [hdr.PixelSpacing' hdr.SpacingBetweenSlices];
        obj.pixdim2  = obj.pixdim1;
    end
    [n1,~] = min( size(obj.imTarget) );
    [n2,~] = min( size(obj.imMoving) );
    imshow(squeeze(obj.imTarget(:,:,1)),'Parent',hAx(1),'DisplayRange',[]);
    imshow(squeeze(obj.imMoving(:,:,1)),'Parent',hAx(2),'DisplayRange',[]);
    set(hAx(1),'Tag','axes_target');
    set(hAx(2),'Tag','axes_moving');

    % Prepare UI controls
    uicontrol('Parent',obj.hFig,...
              'BackgroundColor',1.2*bkg,...
              'Callback',@register_images_Callback,...
              'ForegroundColor','w',...
              'Position',[60 160 70 22],...
              'String','Register',...
              'Style','PushButton',...
              'Tag','pushbutton_register_images');
    uicontrol('Parent',obj.hFig,...
              'Callback',@change_image_Callback,...
              'Max',n1,...
              'Min',1,...
              'Position',[350 241 200 20],...
              'SliderStep',[1/(n1-1) 2/(n1-1)],...
              'Style','Slider',...
              'Tag','slider_target');
    uicontrol('Parent',obj.hFig,...
              'Callback',@change_image_Callback,...
              'Max',n2,...
              'Min',1,...
              'Position',[350 11 200 20],...
              'SliderStep',[1/(n2-1) 2/(n2-1)],...
              'Style','Slider',...
              'Tag','slider_moving');
    uicontrol('Parent',hUip(1),...
              'Callback',@reg_popupmenu_Callback,...
              'Position',[17 136 95 20],...
              'String',{'Translation','Rigid','Affine'},...
              'Tag','popupmenu_transformation');
    uicontrol('Parent',hUip(1),...
              'Callback',@reg_popupmenu_Callback,...
              'Position',[17 81 95 20],...
              'String',{'Linear'},...
              'Tag','popupmenu_interpolation');
    uicontrol('Parent',hUip(1),...
              'Callback',@reg_popupmenu_Callback,...
              'Position',[17 27 95 20],...
              'String',{'NCC','MI','NMI','SMI','NSMI'},...
              'Tag','popupmenu_similarity');
    uicontrol('Parent',hUip(2),...
              'Callback',@change_image_Callback,...
              'Position',[17 85 95 20],...
              'String',examStr,...
              'Tag','popupmenu_target');
    uicontrol('Parent',hUip(2),...
              'Callback',@change_image_Callback,...
              'HorizontalAlignment','Center',...
              'Position',[17 28 50 22],...
              'String',targetStr,...
              'Style','Edit',...
              'Tag','edit_target',...
              'Value',1);
    uicontrol('Parent',hUip(3),...
              'Callback',@change_image_Callback,...
              'Position',[17 85 95 20],...
              'String',examStr,...
              'Tag','popupmenu_moving');
    uicontrol('Parent',hUip(3),...
              'Callback',@change_image_Callback,...
              'HorizontalAlignment','Center',...
              'Position',[17 41 50 22],...
              'String','1',...
              'Style','Edit',...
              'Tag','edit_moving',...
              'Value',1);
    uicontrol('Parent',hUip(3),...
              'BackgroundColor',bkg,...
              'Callback',@segment_Callback,...
              'ForegroundColor','w',...
              'Position', [10 7 115 23],...
              'String','Apply Segmentation',...
              'Style','CheckBox',...
              'Tag','checkbox_segment',...
              'Value',false);

    % Prepare text
    uicontrol('Parent',hUip(1),...
              'BackgroundColor',bkg,...
              'ForegroundColor','w',...
              'Position',[17 157 100 15],...
              'String','Transformation:',...
              'Style','Text',...
              'Tag','text_transformation');
    uicontrol('Parent',hUip(1),...
              'BackgroundColor',bkg,...
              'ForegroundColor','w',...
              'Position',[17 102 100 15],...
              'String','Interpolation:',...
              'Style','Text',...
              'Tag','text_interpolation');
    uicontrol('Parent',hUip(1),...
              'BackgroundColor',bkg,...
              'ForegroundColor','w',...
              'Position',[17 48 100 15],...
              'String','Similarity:',...
              'Style','Text',...
              'Tag','text_similarity');
    uicontrol('Parent',hUip(2),...
              'BackgroundColor',bkg,...
              'ForegroundColor','w',...
              'Position',[17 106 52 15],...
              'String','Exam:',...
              'Style','Text',...
              'Tag','text_target_exam');
    uicontrol('Parent',hUip(2),...
              'BackgroundColor',bkg,...
              'ForegroundColor','w',...
              'Position',[17 51 52 15],...
              'String','Series:',...
              'Style','Text',...
              'Tag','text_target_series');
    uicontrol('Parent',hUip(3),...
              'BackgroundColor',bkg,...
              'ForegroundColor','w',...
              'Position',[17 106 52 15],...
              'String','Exam:',...
              'Style','Text',...
              'Tag','text_moving_exam');
    uicontrol('Parent',hUip(3),...
              'BackgroundColor',bkg,...
              'ForegroundColor','w',...
              'Position',[17 63 52 15],...
              'String','Series:',...
              'Style','Text',...
              'Tag','text_moving_series');

    % Prepare QUATTRO or non-QUATTRO controls
    if ~isQt
        delete(hUip(2:3));
    end

    % Set other application data
    set_ui_current_value(obj.hFig);
    setappdata(obj.hFig,'qtRegObject',obj);
    guidata(obj.hFig,guihandles(obj.hFig));

    % Deal the output
    if nargout
        hFig = obj.hFig;
    end


%-----------------------Callback/Ancillary Functions----------------------------

    function key_press_Callback(hObj,eventdata)

        % Determine action
        if isempty(eventdata.Modifier)
            if strcmpi(eventdata.Key,'escape')
                close(obj.h_fig);
            end
        elseif strcmpi(eventdata.Modifier{1},'control')
            if strcmpi(eventdata.Key,'c')
                copy_params_Callback(hObj,eventdata);
            end
        end

    end %key_press_Callback


    function register_images_Callback(hObj,eventdata)

        % Get GUI information and objects
        h_fig  = guifigure(hObj);
        hs     = guihandles(hObj);
        regObj = getappdata(h_fig,'registrationObject');
        exmObj = getappdata(h_fig,'qtExamObject');

        % Get series and exam numbers
        ex_n(2) = getappdata(hs.popupmenu_moving,'currentvalue');
        ex_n(1) = getappdata(hs.popupmenu_target,'currentvalue');
        se(2)   = getappdata(hs.edit_moving,'currentvalue');
        se(1)   = getappdata(hs.edit_target,'currentvalue');

        % Store the images and image information
        for idx = 1:2
            % Convert the images from a cell 2 an array
            ims = exmObj.imgs{ex_n(idx)}(:,se(idx));
            m   = size(ims{1});
            ims = reshape( cell2mat(ims), m(1), [], m(2) );
            regObj.(['im' num2str(idx)]) = permute(ims,[1 3 2]);

            % Store the image information
            hdr = exmObj.hdrs{ex_n(idx)}(1,1);
            regObj.(['pixdim' num2str(idx)]) =...
                              [hdr.PixelSpacing' hdr.SpacingBetweenSlices];
        end


        % Fire the registation
        regObj.register;
    end %register_images_Callback

end %imregtool

function change_image_Callback(hObj,eventdata)

    % Get the exams object
    hs  = guidata(hObj);
    obj = getappdata(gcbf,'qtExamObject');

    % Store the tag and "_moving" or "_target"
    tag = get(hObj,'Tag');
    str = tag( strfind(tag,'_'):end );

    % Get the series value
    se = round( str2double( get(hs.(['edit' str]),'String') ) );
    if isnan(se) || (se<1)
        se = 1;
    elseif (se>size(obj.imgs,2))
        se = size(obj.imgs,2);
    end
    set(hs.(['edit' str]),'String',int2str(se),'Value',se); %force a valid series value
    curVal = getappdata(hObj,'currentvalue');

    % Get the slice
    sl = round( get(hs.(['slider' str]),'Value') );
    set(hs.(['slider' str]),'Value',sl); %force an integer slice number

    % Get the exam number
    e_num = get(hs.(['popupmenu' str]),'Value');

    % Verify a change in the curent object has occured
    if (get(hs.(tag),'Value')==curVal)
        return
    end

    % Update the current value application data
    setappdata(hs.(tag),'currentvalue',get(hs.(tag),'Value'));

    % Get the image handle, retrieve the image, and display
    hIm = get(hs.(['axes' str]),'Children');
    im  = obj.imgs{e_num}{sl,se};
    set(hIm,'CData',im); 

end %reg_slider_Callback
