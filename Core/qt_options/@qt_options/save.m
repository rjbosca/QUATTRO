function save(obj)
%save  Store the current QUATTRO configuration options
%
%   save(OBJ) stores the current QUATTRO configuration of the qt_options object
%   OBJ in the file specified by the "cfgFile" property

% Find config file
hdr = {'% QUATTRO options definition',...
       '',...
       '% NOTES: Use the ''%'' symbol for commenting in this file.',...
       '',...
       '%        These options are read by the qt_options object class using an "eval"',...
       '%        command. To edit the options, simply replace the value in this file',...
       '%        with the desired one. If assigning a string, use single quotations to',...
       '%        enclose the new value',...
       '',...
       '%        DEFINING NEW OPTIONS can be performed by modifying the qt_options.m',...
       '%        file to includ either a new public or private property. A new method',...
       '%        that validates the option can be coded, but is not necessary, using the',...
       '%        function name set.<opt name> where "opt name" is the option name',...
       '%        following the variable naming convention of MATLAB.',...
       '',...
       '%        ASSIGNING OPTION VALUES is done by placing a value (numeric or character)',...
       '%        to the right of the "=". For empty values use one of [], '', or {}',...
       '%        depending on the prefered data type.',...
       '',...
       '%        CALCULATED OPTION VALUES: certain options are created through calculations',...
       '%        performed on other options (e.g. r1Min and r1Max). Although values can',...
       '%        be set in this file, there is no guarantee that those options will be used',...
       '%        by QUATTRO.',...
       '',...
       '%        ***WARNING*** Invalid options or those for which a public or private',...
       '%        qt_options property has not been programmed will produce a warning',...
       '%        and will be ignored after qt_options instatiation. Moreover, setting',...
       '%        improper values may result in unanticipated results.'};

% Open config file for writing
fid = fopen(obj.cfgFile,'w');
if fid==-1
    warning(['QUATTRO:' mfilename ':writeError'],...
                       'Unable to write QUATTRO options to %s\n','QUATTRO.cfg');
    return
end

% Get option names, removing temporary and dependent properties
opts     = fieldnames(obj);
tempOpts = {'appDir',...
            'cfgFile',...
            'edwiModel',...
            'examType',...
            'guiDir',...
            'hQt',...
            'matlabVer',...
            'modelVal',...
            'r1Min',...
            'r1Max',...
            'r2Min',...
            'r2Max',...
            'saveFile',...
            'scptDir'};
optsInd  = cell_or( cellfun(@(x) strcmpi(x,opts),tempOpts,...
                                                       'UniformOutput',false) );
opts(optsInd) = [];
opts          = sort(opts);

% Write new configuration file
cellfun(@(x) fprintf(fid,'%s\n',x),hdr); fprintf(fid,'\n\n');
for optIdx = 1:length(opts)
    if isnumeric(obj.(opts{optIdx}))
        fprintf(fid,'%s = %f\n',opts{optIdx},obj.(opts{optIdx}));
    elseif islogical(obj.(opts{optIdx}))
        fprintf(fid,'%s = %d\n',opts{optIdx},obj.(opts{optIdx}));
    else
        fprintf(fid,'%s = ''%s''\n',opts{optIdx},obj.(opts{optIdx}));
    end
end